package com.example.liboqs;

import java.util.Arrays;

public class KEMExample {

    public static void main(String[] args) {
        System.out.println("Supported KEMs:");
        Common.print_list(KEMs.get_supported_KEMs());
        System.out.println();

        System.out.println("Enabled KEMs:");
        Common.print_list(KEMs.get_enabled_KEMs());
        System.out.println();

        String kem_name = "DEFAULT";
        KeyEncapsulation client = new KeyEncapsulation(kem_name);
        client.print_details();
        System.out.println();

        // Generate the key pair (public key and secret key)
        long t = System.currentTimeMillis();
        Pair<byte[], byte[]> keyPair = client.generate_keypair(); // Corrected line
        byte[] client_public_key = keyPair.getLeft();  // Extract the public key
        byte[] client_private_key = keyPair.getRight(); // Extract the private key (if needed)
        long timeElapsed = System.currentTimeMillis() - t;

        System.out.println("Client public key:");
        System.out.println(Common.chop_hex(client_public_key));
        System.out.println("\nIt took " + timeElapsed + " millisecs to generate the key pair.");

        // Initialize server with the same KEM
        KeyEncapsulation server = new KeyEncapsulation(kem_name);

        // Server encapsulates a secret using the client's public key
        t = System.currentTimeMillis();
        Pair<byte[], byte[]> server_pair = server.encap_secret(client_public_key);
        System.out.println("It took " + (System.currentTimeMillis() - t) + " millisecs to encapsulate the secret.");
        byte[] ciphertext = server_pair.getLeft(); // Encapsulated secret (ciphertext)
        byte[] shared_secret_server = server_pair.getRight(); // Shared secret generated by the server

        // Client decapsulates to retrieve the shared secret
        t = System.currentTimeMillis();
        byte[] shared_secret_client = client.decap_secret(ciphertext);
        System.out.println("It took " + (System.currentTimeMillis() - t) + " millisecs to decapsulate the secret.");

        // Clean up
        client.dispose_KEM();
        server.dispose_KEM();

        // Print the shared secrets
        System.out.println("\nClient shared secret:");
        System.out.println(Common.chop_hex(shared_secret_client));
        System.out.println("\nServer shared secret:");
        System.out.println(Common.chop_hex(shared_secret_server));

        // Verify if the shared secrets are the same
        System.out.println("\nShared secrets coincide? " + Arrays.equals(shared_secret_client, shared_secret_server));
    }

}
